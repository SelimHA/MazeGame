/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maze;

import javax.swing.JOptionPane;

/**
 *
 * @author
 */
public class MainScreen extends javax.swing.JFrame {
    public int language_int;
    Settings settings;
    /**
     * Creates new form main
     */
    public MainScreen() {
        settings = new Settings();
        language_int = settings.getLanguageInt();
        initComponents();//default by Java
        choosePanel();//chooses whether last-saved game button should be choosen or create a new game panel, checks if there is a savedgame file or not
        setGiveSecondPanelInvisible(false);//by default Normal is selected so we can hide showing this panel
        setGiveLivesPanelInvisible(false);//by default Normal is selected so we can hide showing this panel
        setTextLanguages();//sets the languages of all text on the screen
        setTextBubbles();//adds tooltips to different modes on the game in the appropriate language
        fillTime();//fills time-box if needed
    }
    
    private void choosePanel(){
        if(GameConstants.savegame_location_map.exists() && GameConstants.savegame_location_details.exists()){ //It means that there is a saved game
            panel_nosavegame.setVisible(false);
        }else{
            button_load_saved_game.setVisible(false);
        }
    }
    
    private void setTextLanguages(){
        label_welcome.setText(LanguageTexts.WELCOME_TEXT[language_int]);
        radio_normal.setText(LanguageTexts.NORMAL_MODE_TEXT_jOPTION[language_int]);
        radio_timer.setText(LanguageTexts.TIMER_MODE_TEXT_jOPTION[language_int]);
        radio_challange.setText(LanguageTexts.CHALLENGE_MODE_TEXT_jOPTION[language_int]);
        label_select_game_mode.setText(LanguageTexts.SELECT_GAME_MODE_TEXT[language_int]);
        label_enter_time.setText(LanguageTexts.ENTER_TIME_LIMIT_TEXT[language_int]);
        label_seconds_text.setText(LanguageTexts.SECOND_S_TEXT[language_int]);
        label_enterlives.setText(LanguageTexts.ENTER_NUMBER_OF_LIVES[language_int]);
        button_play.setText(LanguageTexts.BUTTON_PLAY_TEXT[language_int]);
        button_load_saved_game.setText(LanguageTexts.BUTTON_LOAD_LAST_GAME[language_int]);
        button_settings.setText(LanguageTexts.BUTTON_SETTINGS_TEXT[language_int]);
        button_stats.setText(LanguageTexts.BUTTON_STATISTICS_TEXT[language_int]);
    }
    
    private void setTextBubbles(){
        radio_normal.setToolTipText(LanguageTexts.NORMAL_MODE_BUBBLE_DESCRIPTION[language_int]);
        radio_timer.setToolTipText(LanguageTexts.TIMER_MODE_BUBBLE_DESCRIPTION[language_int]);
        radio_challange.setToolTipText(LanguageTexts.CHALLENGE_MODE_BUBBLE_DESCRIPTION[language_int]);
    }
    
    private void fillTime(){ //if auto-fill time is enabled
        if(settings.getDefaultTime()>4 && settings.getDefaultTime()<8001){
            field_game_length.setText(settings.getDefaultTime()+"");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_gamemodes = new javax.swing.ButtonGroup();
        label_welcome = new javax.swing.JLabel();
        button_settings = new javax.swing.JButton();
        button_stats = new javax.swing.JButton();
        button_load_saved_game = new javax.swing.JButton();
        panel_nosavegame = new javax.swing.JPanel();
        label_enter_time = new javax.swing.JLabel();
        field_game_length = new javax.swing.JTextField();
        label_seconds_text = new javax.swing.JLabel();
        label_enterlives = new javax.swing.JLabel();
        label_select_game_mode = new javax.swing.JLabel();
        field_lives = new javax.swing.JTextField();
        radio_normal = new javax.swing.JRadioButton();
        label_max10 = new javax.swing.JLabel();
        radio_timer = new javax.swing.JRadioButton();
        radio_challange = new javax.swing.JRadioButton();
        button_play = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maze");

        label_welcome.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        label_welcome.setText("Welcome!");

        button_settings.setText("Settings");
        button_settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_settingsActionPerformed(evt);
            }
        });

        button_stats.setText("Statistics");
        button_stats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_statsActionPerformed(evt);
            }
        });

        button_load_saved_game.setText("Load last saved game");
        button_load_saved_game.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_load_saved_gameActionPerformed(evt);
            }
        });

        label_enter_time.setText("Please enter a time limit:");

        label_seconds_text.setText("seconds");

        label_enterlives.setText("Please enter the number of lives:");

        label_select_game_mode.setText("Please select a game mode:");

        field_lives.setText("3");

        buttonGroup_gamemodes.add(radio_normal);
        radio_normal.setSelected(true);
        radio_normal.setText("Normal");
        radio_normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_normalActionPerformed(evt);
            }
        });

        label_max10.setText("(max. 10)");

        buttonGroup_gamemodes.add(radio_timer);
        radio_timer.setText("Timer");
        radio_timer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_timerActionPerformed(evt);
            }
        });

        buttonGroup_gamemodes.add(radio_challange);
        radio_challange.setText("Challange");
        radio_challange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_challangeActionPerformed(evt);
            }
        });

        button_play.setText("Play");
        button_play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_playActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_nosavegameLayout = new javax.swing.GroupLayout(panel_nosavegame);
        panel_nosavegame.setLayout(panel_nosavegameLayout);
        panel_nosavegameLayout.setHorizontalGroup(
            panel_nosavegameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_nosavegameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_nosavegameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_nosavegameLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(radio_challange))
                    .addComponent(label_select_game_mode)
                    .addGroup(panel_nosavegameLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(panel_nosavegameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radio_normal)
                            .addComponent(radio_timer)))
                    .addGroup(panel_nosavegameLayout.createSequentialGroup()
                        .addComponent(label_enter_time)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_game_length, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_seconds_text))
                    .addGroup(panel_nosavegameLayout.createSequentialGroup()
                        .addComponent(label_enterlives)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_lives, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_max10)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(button_play, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_nosavegameLayout.setVerticalGroup(
            panel_nosavegameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_nosavegameLayout.createSequentialGroup()
                .addComponent(label_select_game_mode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radio_normal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radio_timer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radio_challange)
                .addGap(18, 18, 18)
                .addGroup(panel_nosavegameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_enter_time)
                    .addComponent(field_game_length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_seconds_text))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_nosavegameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_enterlives)
                    .addComponent(field_lives, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_max10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(button_play)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(button_settings, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(button_stats, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_welcome)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(button_load_saved_game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_nosavegame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_welcome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_nosavegame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(button_load_saved_game)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_settings)
                    .addComponent(button_stats))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_playActionPerformed
        //First get the game mode
        int gamemode;
        int time = -1; //if normal mode selected than no time needed
        //Get mode first:
        if(radio_normal.isSelected()){
            gamemode = GameConstants.NORMAL_MODE;
        }else if(radio_timer.isSelected()){
             gamemode = GameConstants.TIMER_MODE;
             
        }else{
             gamemode = GameConstants.CHALLANGE_MODE;
        }
        //Now get time if needed:
        if(radio_timer.isSelected() || radio_challange.isSelected() ){
            try{
                 time = Integer.parseInt(field_game_length.getText());
                 if(time<1 || time>8000){
                     JOptionPane.showMessageDialog(this, LanguageTexts.TOO_MUCH_TIME_WARNING[language_int]);
                     return;
                 }
             }catch(Exception e){
                 JOptionPane.showMessageDialog(this, LanguageTexts.BAD_TIME_FORMAT_ERROR_WARNING[language_int]);
                 field_game_length.setText("");
                 return;
             }
        }
        int lives =0;
        if(radio_challange.isSelected()){
            try{
                lives = Integer.parseInt(field_lives.getText());
                if(lives<0 || lives>10){
                    JOptionPane.showMessageDialog(this, LanguageTexts.LIVES_NUMBER_OUT_OF_RANGE[language_int]);
                    return;
                }
            } catch (Exception ex) {//any mistake, pop-up will show to reenter an integer is needed
                JOptionPane.showMessageDialog(this, LanguageTexts.BAD_NUMBER_FORMAT_ERROR_WARNING[language_int]);
                return;
            }
        }
        //now get the map's size:
        boolean goodfield;
        int fieldsize = 10;
        do{
            goodfield = true;
            try{
                String input =JOptionPane.showInputDialog(this,LanguageTexts.ENTER_SIZE_OF_FIELD_LONG[language_int]);
                if(input == null)//meaning user pressed cancel
                    return;
                fieldsize = Integer.parseInt(input);
                if((!settings.isOverridableMapsize() && fieldsize > settings.getMaxMapSize())|| (fieldsize<10 || fieldsize>299)){
                    JOptionPane.showMessageDialog(this, LanguageTexts.FIELD_SIZE_TOO_MUCH[language_int]);
                    goodfield = false;
                }
            }catch(Exception e){
                goodfield = false;
                JOptionPane.showMessageDialog(this, LanguageTexts.BAD_FIELD_SIZE_FORMAT[language_int]);
            }
        }while(!goodfield);
        new MazeScreen(gamemode, time, fieldsize, lives).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_button_playActionPerformed

    private void button_settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_settingsActionPerformed
        new SettingsScreen().setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_button_settingsActionPerformed

    private void button_statsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_statsActionPerformed
        new StatisticsScreen().setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_button_statsActionPerformed

    private void button_load_saved_gameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_load_saved_gameActionPerformed
        this.dispose();
        new MazeScreen(0,0,10,0).setVisible(true); //Values are not important as button is only visible if savegame files are available and if they are corrupted then the game would terminate.
    }//GEN-LAST:event_button_load_saved_gameActionPerformed

    private void radio_challangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_challangeActionPerformed
        setGiveSecondPanelInvisible(true);
        setGiveLivesPanelInvisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_radio_challangeActionPerformed

    private void radio_timerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_timerActionPerformed
        setGiveSecondPanelInvisible(true);
        setGiveLivesPanelInvisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_radio_timerActionPerformed

    private void radio_normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_normalActionPerformed
        setGiveSecondPanelInvisible(false);
        setGiveLivesPanelInvisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_radio_normalActionPerformed

    private void setGiveSecondPanelInvisible(boolean make_invisible){
            label_enter_time.setVisible(make_invisible);
            label_seconds_text.setVisible(make_invisible);
            field_game_length.setVisible(make_invisible);
    }
    private void setGiveLivesPanelInvisible(boolean make_invisible){
        label_enterlives.setVisible(make_invisible);
        field_lives.setVisible(make_invisible);
        label_max10.setVisible(make_invisible);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_gamemodes;
    private javax.swing.JButton button_load_saved_game;
    private javax.swing.JButton button_play;
    private javax.swing.JButton button_settings;
    private javax.swing.JButton button_stats;
    private javax.swing.JTextField field_game_length;
    private javax.swing.JTextField field_lives;
    private javax.swing.JLabel label_enter_time;
    private javax.swing.JLabel label_enterlives;
    private javax.swing.JLabel label_max10;
    private javax.swing.JLabel label_seconds_text;
    private javax.swing.JLabel label_select_game_mode;
    private javax.swing.JLabel label_welcome;
    private javax.swing.JPanel panel_nosavegame;
    private javax.swing.JRadioButton radio_challange;
    private javax.swing.JRadioButton radio_normal;
    private javax.swing.JRadioButton radio_timer;
    // End of variables declaration//GEN-END:variables
}
