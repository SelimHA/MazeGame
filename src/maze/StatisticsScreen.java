/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maze;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author
 */
public class StatisticsScreen extends javax.swing.JFrame implements WindowListener {
Statistics statistics;
Settings settings;
int language;
    /**
     * Creates new form Stats
     */
    public StatisticsScreen() {
        statistics = new Statistics();
        settings = new Settings();
        language = settings.getLanguageInt();
        this.setTitle(LanguageTexts.STATISTICS_TEXT[language]);
        initComponents();
        this.addWindowListener(this);
        setLabels();//sets all labels (to given language) and displays them
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_winratio = new javax.swing.JLabel();
        label_totalwins = new javax.swing.JLabel();
        label_totallosts = new javax.swing.JLabel();
        label_totalgames = new javax.swing.JLabel();
        label_normalwins = new javax.swing.JLabel();
        label_timerwins = new javax.swing.JLabel();
        label_challangewins = new javax.swing.JLabel();
        label_timerlosts = new javax.swing.JLabel();
        label_challangelosts = new javax.swing.JLabel();
        label_normallosts = new javax.swing.JLabel();
        label_timerwin_percent = new javax.swing.JLabel();
        label_challangewin_percent = new javax.swing.JLabel();
        label_normalwin_percent = new javax.swing.JLabel();
        label_totalwin_percent = new javax.swing.JLabel();
        label_totalpercentcomment = new javax.swing.JLabel();
        label_normalpercentcomment = new javax.swing.JLabel();
        label_timerpercentcomment = new javax.swing.JLabel();
        label_challangepercentcomment = new javax.swing.JLabel();
        button_resetstats = new javax.swing.JButton();
        ProgressBar = new javax.swing.JProgressBar();
        progressbar_infotext = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Statistics");

        label_winratio.setText("                  ");
        label_winratio.setToolTipText("");

        label_totalwins.setText("                  ");

        label_totallosts.setText("                  ");

        label_totalgames.setText("                  ");

        label_normalwins.setText("                  ");

        label_timerwins.setText("                  ");

        label_challangewins.setText("                  ");

        label_timerlosts.setText("                  ");

        label_challangelosts.setText("                  ");

        label_normallosts.setText("                  ");

        label_timerwin_percent.setText("                          ");

        label_challangewin_percent.setText("                  ");

        label_normalwin_percent.setText("                  ");

        label_totalwin_percent.setText("                  ");
        label_totalwin_percent.setToolTipText("");

        label_totalpercentcomment.setText("                  ");

        label_normalpercentcomment.setText("                  ");

        label_timerpercentcomment.setText("                  ");

        label_challangepercentcomment.setText("                  ");

        button_resetstats.setText("Reset statistics");
        button_resetstats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_resetstatsActionPerformed(evt);
            }
        });

        ProgressBar.setBackground(new java.awt.Color(255, 0, 0));
        ProgressBar.setForeground(new java.awt.Color(71, 207, 28));

        progressbar_infotext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(label_totalwin_percent)
                        .addGap(94, 94, 94)
                        .addComponent(label_totalpercentcomment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(progressbar_infotext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_resetstats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_totalgames)
                            .addComponent(label_totalwins)
                            .addComponent(label_totallosts)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label_challangewins)
                                    .addComponent(label_timerwins)
                                    .addComponent(label_normalwins)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label_challangelosts)
                                    .addComponent(label_timerlosts)
                                    .addComponent(label_normallosts)))
                            .addComponent(label_winratio))
                        .addGap(0, 407, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label_timerwin_percent, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(label_normalwin_percent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label_challangewin_percent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_timerpercentcomment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label_challangepercentcomment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label_normalpercentcomment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_winratio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_totalwin_percent)
                    .addComponent(label_totalpercentcomment))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(progressbar_infotext, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_normalwin_percent)
                    .addComponent(label_normalpercentcomment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_timerpercentcomment)
                    .addComponent(label_timerwin_percent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_challangepercentcomment)
                    .addComponent(label_challangewin_percent, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(label_totalgames)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_totalwins)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_normalwins)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_timerwins)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_challangewins)
                .addGap(21, 21, 21)
                .addComponent(label_totallosts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_normallosts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_timerlosts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_challangelosts)
                .addGap(18, 18, 18)
                .addComponent(button_resetstats)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_resetstatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_resetstatsActionPerformed
        //If this button is pressed, message will pop-up asking user, whether he/she really want to reset
        int decision = JOptionPane.showConfirmDialog(this, LanguageTexts.RESET_STATISTICS_WARNING_MESSAGE[language],LanguageTexts.WARNING_TEXT[language],JOptionPane.YES_NO_OPTION);
        if(decision == JOptionPane.YES_OPTION){
            //If user wants to reset, than we can reset the stats, and also refresh the window, by reopening it.
            statistics.resetStatistics();
            this.dispose();
            new StatisticsScreen().setVisible(true);
        }
        
    }//GEN-LAST:event_button_resetstatsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JButton button_resetstats;
    private javax.swing.JLabel label_challangelosts;
    private javax.swing.JLabel label_challangepercentcomment;
    private javax.swing.JLabel label_challangewin_percent;
    private javax.swing.JLabel label_challangewins;
    private javax.swing.JLabel label_normallosts;
    private javax.swing.JLabel label_normalpercentcomment;
    private javax.swing.JLabel label_normalwin_percent;
    private javax.swing.JLabel label_normalwins;
    private javax.swing.JLabel label_timerlosts;
    private javax.swing.JLabel label_timerpercentcomment;
    private javax.swing.JLabel label_timerwin_percent;
    private javax.swing.JLabel label_timerwins;
    private javax.swing.JLabel label_totalgames;
    private javax.swing.JLabel label_totallosts;
    private javax.swing.JLabel label_totalpercentcomment;
    private javax.swing.JLabel label_totalwin_percent;
    private javax.swing.JLabel label_totalwins;
    private javax.swing.JLabel label_winratio;
    private javax.swing.JLabel progressbar_infotext;
    // End of variables declaration//GEN-END:variables

    int total_games_played;
    private void setLabels() {
        //This will translate all labels
        total_games_played = statistics.getTotalWin()+statistics.getTotalLost();
        label_winratio.setText(LanguageTexts.WIN_RATIO_TEXT[language]);
        setPercentages();//calculates and sets the win ratio in percentages
        label_totalgames.setText(LanguageTexts.TOTAL_GAMES_PLAYED[language]+total_games_played);
        setWins();//sets labels related to won games
        setLosts();//sets labels related to lost games
        setComments();//sets comments (given that you've played enough games) on how good you are in different modes and in total.
        //For Mac progressbar did not support setting the background and used default Mac color (Blue-grey), so different text is needed.
        if(System.getProperty("os.name").toLowerCase().contains("mac"))//For mac it looks different
            progressbar_infotext.setText(LanguageTexts.PROGRESS_BAR_INFO_TEXT_MAC[language]);
        else//on Linux and Windows they look the same
            progressbar_infotext.setText(LanguageTexts.PROGRESS_BAR_INFO_TEXT_WINDOWS_LINUX[language]);
        button_resetstats.setText(LanguageTexts.BUTTON_RESET_STATISTICS[language]);
    }

    float totalwin_percent,normalwin_percent, timerwin_percent, challangewin_percent;
    private void setPercentages() {
        //This will calulate all the percentages to the game, if no game has been player '-' will be shown
        //This method automatically sets the text of the labels showing the percentage
        //Also the progressbar is set in this method
        DecimalFormat df = new DecimalFormat("0.0"); //to round the obtained value
        String total = LanguageTexts.WIN_RATIO_TOTAL[language], normal = LanguageTexts.NORMAL_MODE_TEXT[language], timer = LanguageTexts.TIMER_MODE_TEXT[language], challange = LanguageTexts.CHALLENGE_MODE_TEXT[language]; //default text for all ratio types
        if(total_games_played!=0){
            totalwin_percent = (((float)(statistics.getTotalWin())/total_games_played)*(float)100);
            total = total +df.format(totalwin_percent)+"%";
        }else{
            total = total + "-";
        }
        int divisor;
        if((divisor = statistics.getNormalWin()+statistics.getNormalLost())!=0){
            normalwin_percent = (((float)(statistics.getNormalWin())/divisor)*(float)100);
            normal = normal +df.format(normalwin_percent)+"%";
        }else{
            normal = normal +  "-";
        }if((divisor = statistics.getTimerWin()+statistics.getTimerLost())!=0){
            timerwin_percent = (((float)(statistics.getTimerWin())/(statistics.getTimerWin()+statistics.getTimerLost()))*(float)100);
            timer = timer +df.format(timerwin_percent)+"%";
        }else{
            timer = timer + "-";
        }
        if((divisor = statistics.getChallangeWin()+statistics.getChallangeLost())!=0){
            challangewin_percent = (((float)(statistics.getChallangeWin())/divisor)*(float)100.00);
            challange = challange + df.format(challangewin_percent)+"%";
        }else{
            challange = challange + "-";
        }
        label_totalwin_percent.setText(total);
        label_normalwin_percent.setText(normal);
        label_timerwin_percent.setText(timer);
        label_challangewin_percent.setText(challange);
        if(total_games_played != 0){
            ProgressBar.setValue((int)totalwin_percent);
        }else{
            ProgressBar.setBackground(Color.BLUE);
        }
    }

    private void setWins() {
        label_totalwins.setText(LanguageTexts.TOTAL_WINS[language]+statistics.getTotalWin());
        label_normalwins.setText(LanguageTexts.NORMAL_MODE_TEXT[language]+statistics.getNormalWin());
        label_timerwins.setText(LanguageTexts.TIMER_MODE_TEXT[language]+statistics.getTimerWin());
        label_challangewins.setText(LanguageTexts.CHALLENGE_MODE_TEXT[language]+statistics.getChallangeWin());
    }

    private void setLosts() {
        label_totallosts.setText(LanguageTexts.TOTAL_LOSTS[language]+statistics.getTotalLost());
        label_normallosts.setText(LanguageTexts.NORMAL_MODE_TEXT[language]+statistics.getNormalLost());
        label_timerlosts.setText(LanguageTexts.TIMER_MODE_TEXT[language]+statistics.getTimerLost());
        label_challangelosts.setText(LanguageTexts.CHALLENGE_MODE_TEXT[language]+statistics.getChallangeLost());
    }

    private void setComments() {
        if(total_games_played>10) //More than 10 games have to be played to show the comment
            label_totalpercentcomment.setText(LanguageTexts.ALL_COMMENTS[getCommentIndex(totalwin_percent)][language]);
        if(statistics.getNormalWin()+statistics.getNormalLost()>10)
            label_normalpercentcomment.setText(LanguageTexts.ALL_COMMENTS[getCommentIndex(normalwin_percent)][language]);
        if(statistics.getTimerWin()+statistics.getTimerLost()>10)
            label_timerpercentcomment.setText(LanguageTexts.ALL_COMMENTS[getCommentIndex(timerwin_percent)][language]);
        if(statistics.getChallangeWin()+statistics.getChallangeLost()>10)
            label_challangepercentcomment.setText(LanguageTexts.ALL_COMMENTS[getCommentIndex(challangewin_percent)][language]);
        
    }
    
    private int getCommentIndex(float percentage){
        //From the percentage it will return an index, which will be used to show a comment, on how good the user is
        if(percentage>=90){
            return 0;
        }else if(percentage>=80){
            return 1;
        }else if(percentage>=60){
            return 2;
        }else if(percentage>=40){
            return 3;
        }else{
            return 4;
        }
    }

    @Override
    public void windowOpened(WindowEvent we) {
    }

    @Override
    public void windowClosing(WindowEvent we) {
        new MainScreen().setVisible(true);
        this.dispose();
    }

    @Override
    public void windowClosed(WindowEvent we) {
        
    }

    @Override
    public void windowIconified(WindowEvent we) {
    }

    @Override
    public void windowDeiconified(WindowEvent we) {
    }

    @Override
    public void windowActivated(WindowEvent we) {
    }

    @Override
    public void windowDeactivated(WindowEvent we) {
    }
}
